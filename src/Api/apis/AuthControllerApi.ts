/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResultAccountDetailDto,
  ResultAuthenticationResponse,
  ResultListAccountDetailDto,
  ResultString,
  ResultVerificationCodeReq,
  ResultVoid,
  SetupPwFromOtpReq,
  SignInRequest,
  SignupRequest,
  VerificationCodeReq,
} from '../models/index';
import {
    ResultAccountDetailDtoFromJSON,
    ResultAccountDetailDtoToJSON,
    ResultAuthenticationResponseFromJSON,
    ResultAuthenticationResponseToJSON,
    ResultListAccountDetailDtoFromJSON,
    ResultListAccountDetailDtoToJSON,
    ResultStringFromJSON,
    ResultStringToJSON,
    ResultVerificationCodeReqFromJSON,
    ResultVerificationCodeReqToJSON,
    ResultVoidFromJSON,
    ResultVoidToJSON,
    SetupPwFromOtpReqFromJSON,
    SetupPwFromOtpReqToJSON,
    SignInRequestFromJSON,
    SignInRequestToJSON,
    SignupRequestFromJSON,
    SignupRequestToJSON,
    VerificationCodeReqFromJSON,
    VerificationCodeReqToJSON,
} from '../models/index';

export interface CreateUserHandlerRequest {
    signupRequest: SignupRequest;
}

export interface LoginRequest {
    signInRequest: SignInRequest;
}

export interface SentOtpHandlerRequest {
    verificationCodeReq: VerificationCodeReq;
}

export interface SetUpPasswordRequest {
    setupPwFromOtpReq: SetupPwFromOtpReq;
}

/**
 * 
 */
export class AuthControllerApi extends runtime.BaseAPI {

    /**
     */
    async allUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultListAccountDetailDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultListAccountDetailDtoFromJSON(jsonValue));
    }

    /**
     */
    async allUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultListAccountDetailDto> {
        const response = await this.allUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserHandlerRaw(requestParameters: CreateUserHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultString>> {
        if (requestParameters['signupRequest'] == null) {
            throw new runtime.RequiredError(
                'signupRequest',
                'Required parameter "signupRequest" was null or undefined when calling createUserHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupRequestToJSON(requestParameters['signupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultStringFromJSON(jsonValue));
    }

    /**
     */
    async createUserHandler(requestParameters: CreateUserHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultString> {
        const response = await this.createUserHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultAuthenticationResponse>> {
        if (requestParameters['signInRequest'] == null) {
            throw new runtime.RequiredError(
                'signInRequest',
                'Required parameter "signInRequest" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInRequestToJSON(requestParameters['signInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultAuthenticationResponseFromJSON(jsonValue));
    }

    /**
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultAuthenticationResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sentOtpHandlerRaw(requestParameters: SentOtpHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultVerificationCodeReq>> {
        if (requestParameters['verificationCodeReq'] == null) {
            throw new runtime.RequiredError(
                'verificationCodeReq',
                'Required parameter "verificationCodeReq" was null or undefined when calling sentOtpHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/send/login-signup-otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerificationCodeReqToJSON(requestParameters['verificationCodeReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultVerificationCodeReqFromJSON(jsonValue));
    }

    /**
     */
    async sentOtpHandler(requestParameters: SentOtpHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultVerificationCodeReq> {
        const response = await this.sentOtpHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setUpPasswordRaw(requestParameters: SetUpPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultAccountDetailDto>> {
        if (requestParameters['setupPwFromOtpReq'] == null) {
            throw new runtime.RequiredError(
                'setupPwFromOtpReq',
                'Required parameter "setupPwFromOtpReq" was null or undefined when calling setUpPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/set-pw`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetupPwFromOtpReqToJSON(requestParameters['setupPwFromOtpReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultAccountDetailDtoFromJSON(jsonValue));
    }

    /**
     */
    async setUpPassword(requestParameters: SetUpPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultAccountDetailDto> {
        const response = await this.setUpPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async signOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultVoid>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/signout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultVoidFromJSON(jsonValue));
    }

    /**
     */
    async signOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultVoid> {
        const response = await this.signOutRaw(initOverrides);
        return await response.value();
    }

}
