/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Coupon } from '../models';
// @ts-ignore
import type { ResultCart } from '../models';
// @ts-ignore
import type { ResultCoupon } from '../models';
// @ts-ignore
import type { ResultListCouponDtoResponse } from '../models';
// @ts-ignore
import type { ResultVoid } from '../models';
/**
 * AdminCouponControllerApi - axios parameter creator
 * @export
 */
export const AdminCouponControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} apply 
         * @param {string} code 
         * @param {number} orderValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyCoupon: async (apply: string, code: string, orderValue: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apply' is not null or undefined
            assertParamExists('applyCoupon', 'apply', apply)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('applyCoupon', 'code', code)
            // verify required parameter 'orderValue' is not null or undefined
            assertParamExists('applyCoupon', 'orderValue', orderValue)
            const localVarPath = `/coupon/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (orderValue !== undefined) {
                localVarQueryParameter['orderValue'] = orderValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Coupon} coupon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCoupon: async (coupon: Coupon, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coupon' is not null or undefined
            assertParamExists('createCoupon', 'coupon', coupon)
            const localVarPath = `/coupon/admin/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coupon, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon: async (couponId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('deleteCoupon', 'couponId', couponId)
            const localVarPath = `/coupon/admin/delete/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCoupons: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/coupon/admin/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminCouponControllerApi - functional programming interface
 * @export
 */
export const AdminCouponControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminCouponControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} apply 
         * @param {string} code 
         * @param {number} orderValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyCoupon(apply: string, code: string, orderValue: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyCoupon(apply, code, orderValue, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCouponControllerApi.applyCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Coupon} coupon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCoupon(coupon: Coupon, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCoupon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCoupon(coupon, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCouponControllerApi.createCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoupon(couponId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCoupon(couponId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCouponControllerApi.deleteCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCoupons(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListCouponDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCoupons(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCouponControllerApi.getAllCoupons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminCouponControllerApi - factory interface
 * @export
 */
export const AdminCouponControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminCouponControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} apply 
         * @param {string} code 
         * @param {number} orderValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyCoupon(apply: string, code: string, orderValue: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultCart> {
            return localVarFp.applyCoupon(apply, code, orderValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Coupon} coupon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCoupon(coupon: Coupon, options?: RawAxiosRequestConfig): AxiosPromise<ResultCoupon> {
            return localVarFp.createCoupon(coupon, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} couponId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon(couponId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.deleteCoupon(couponId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCoupons(options?: RawAxiosRequestConfig): AxiosPromise<ResultListCouponDtoResponse> {
            return localVarFp.getAllCoupons(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminCouponControllerApi - interface
 * @export
 * @interface AdminCouponControllerApi
 */
export interface AdminCouponControllerApiInterface {
    /**
     * 
     * @param {string} apply 
     * @param {string} code 
     * @param {number} orderValue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCouponControllerApiInterface
     */
    applyCoupon(apply: string, code: string, orderValue: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultCart>;

    /**
     * 
     * @param {Coupon} coupon 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCouponControllerApiInterface
     */
    createCoupon(coupon: Coupon, options?: RawAxiosRequestConfig): AxiosPromise<ResultCoupon>;

    /**
     * 
     * @param {number} couponId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCouponControllerApiInterface
     */
    deleteCoupon(couponId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCouponControllerApiInterface
     */
    getAllCoupons(options?: RawAxiosRequestConfig): AxiosPromise<ResultListCouponDtoResponse>;

}

/**
 * AdminCouponControllerApi - object-oriented interface
 * @export
 * @class AdminCouponControllerApi
 * @extends {BaseAPI}
 */
export class AdminCouponControllerApi extends BaseAPI implements AdminCouponControllerApiInterface {
    /**
     * 
     * @param {string} apply 
     * @param {string} code 
     * @param {number} orderValue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCouponControllerApi
     */
    public applyCoupon(apply: string, code: string, orderValue: number, options?: RawAxiosRequestConfig) {
        return AdminCouponControllerApiFp(this.configuration).applyCoupon(apply, code, orderValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Coupon} coupon 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCouponControllerApi
     */
    public createCoupon(coupon: Coupon, options?: RawAxiosRequestConfig) {
        return AdminCouponControllerApiFp(this.configuration).createCoupon(coupon, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} couponId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCouponControllerApi
     */
    public deleteCoupon(couponId: number, options?: RawAxiosRequestConfig) {
        return AdminCouponControllerApiFp(this.configuration).deleteCoupon(couponId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCouponControllerApi
     */
    public getAllCoupons(options?: RawAxiosRequestConfig) {
        return AdminCouponControllerApiFp(this.configuration).getAllCoupons(options).then((request) => request(this.axios, this.basePath));
    }
}

