/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResultListSeller,
  ResultSeller,
  ResultSellerReport,
  ResultString,
  Seller,
} from '../models/index';
import {
    ResultListSellerFromJSON,
    ResultListSellerToJSON,
    ResultSellerFromJSON,
    ResultSellerToJSON,
    ResultSellerReportFromJSON,
    ResultSellerReportToJSON,
    ResultStringFromJSON,
    ResultStringToJSON,
    SellerFromJSON,
    SellerToJSON,
} from '../models/index';

export interface DeleteSellerRequest {
    id: number;
}

export interface GetAllSellersRequest {
    status?: GetAllSellersStatusEnum;
}

export interface GetSellerByIdRequest {
    id: number;
}

export interface UpdateSellerRequest {
    seller: Seller;
}

export interface UpdateSellerByIdRequest {
    id: number;
    seller: Seller;
}

/**
 * 
 */
export class SellerControllerApi extends runtime.BaseAPI {

    /**
     */
    async deleteSellerRaw(requestParameters: DeleteSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSeller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/seller/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultStringFromJSON(jsonValue));
    }

    /**
     */
    async deleteSeller(requestParameters: DeleteSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultString> {
        const response = await this.deleteSellerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllSellersRaw(requestParameters: GetAllSellersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultListSeller>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/seller/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultListSellerFromJSON(jsonValue));
    }

    /**
     */
    async getAllSellers(requestParameters: GetAllSellersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultListSeller> {
        const response = await this.getAllSellersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSellerByIdRaw(requestParameters: GetSellerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultSeller>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSellerById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/seller/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultSellerFromJSON(jsonValue));
    }

    /**
     */
    async getSellerById(requestParameters: GetSellerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultSeller> {
        const response = await this.getSellerByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSellerByReportRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultSellerReport>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/seller/report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultSellerReportFromJSON(jsonValue));
    }

    /**
     */
    async getSellerByReport(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultSellerReport> {
        const response = await this.getSellerByReportRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSellerRaw(requestParameters: UpdateSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultSeller>> {
        if (requestParameters['seller'] == null) {
            throw new runtime.RequiredError(
                'seller',
                'Required parameter "seller" was null or undefined when calling updateSeller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/seller`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SellerToJSON(requestParameters['seller']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultSellerFromJSON(jsonValue));
    }

    /**
     */
    async updateSeller(requestParameters: UpdateSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultSeller> {
        const response = await this.updateSellerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSellerByIdRaw(requestParameters: UpdateSellerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultSeller>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSellerById().'
            );
        }

        if (requestParameters['seller'] == null) {
            throw new runtime.RequiredError(
                'seller',
                'Required parameter "seller" was null or undefined when calling updateSellerById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/seller/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SellerToJSON(requestParameters['seller']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultSellerFromJSON(jsonValue));
    }

    /**
     */
    async updateSellerById(requestParameters: UpdateSellerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultSeller> {
        const response = await this.updateSellerByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllSellersStatusEnum = {
    PendingVerification: 'PENDING_VERIFICATION',
    Active: 'ACTIVE',
    Suspended: 'SUSPENDED',
    Deactivated: 'DEACTIVATED',
    Banned: 'BANNED',
    Closed: 'CLOSED'
} as const;
export type GetAllSellersStatusEnum = typeof GetAllSellersStatusEnum[keyof typeof GetAllSellersStatusEnum];
