/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponse } from '../models';
// @ts-ignore
import type { CreateReviewRequest } from '../models';
// @ts-ignore
import type { Review } from '../models';
/**
 * ReviewControllerApi - axios parameter creator
 * @export
 */
export const ReviewControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReview: async (reviewId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('deleteReview', 'reviewId', reviewId)
            const localVarPath = `/reviews/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsByProductId: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getReviewsByProductId', 'productId', productId)
            const localVarPath = `/products/{productId}/reviews`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {CreateReviewRequest} createReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReview: async (reviewId: number, createReviewRequest: CreateReviewRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('updateReview', 'reviewId', reviewId)
            // verify required parameter 'createReviewRequest' is not null or undefined
            assertParamExists('updateReview', 'createReviewRequest', createReviewRequest)
            const localVarPath = `/reviews/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {CreateReviewRequest} createReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeReview: async (productId: number, createReviewRequest: CreateReviewRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('writeReview', 'productId', productId)
            // verify required parameter 'createReviewRequest' is not null or undefined
            assertParamExists('writeReview', 'createReviewRequest', createReviewRequest)
            const localVarPath = `/products/{productId}/reviews`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewControllerApi - functional programming interface
 * @export
 */
export const ReviewControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReview(reviewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReview(reviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi.deleteReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewsByProductId(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Review>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReviewsByProductId(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi.getReviewsByProductId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {CreateReviewRequest} createReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReview(reviewId: number, createReviewRequest: CreateReviewRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReview(reviewId, createReviewRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi.updateReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {CreateReviewRequest} createReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeReview(productId: number, createReviewRequest: CreateReviewRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeReview(productId, createReviewRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi.writeReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReviewControllerApi - factory interface
 * @export
 */
export const ReviewControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReview(reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse> {
            return localVarFp.deleteReview(reviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsByProductId(productId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Review>> {
            return localVarFp.getReviewsByProductId(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {CreateReviewRequest} createReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReview(reviewId: number, createReviewRequest: CreateReviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<Review> {
            return localVarFp.updateReview(reviewId, createReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {CreateReviewRequest} createReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeReview(productId: number, createReviewRequest: CreateReviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<Review> {
            return localVarFp.writeReview(productId, createReviewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReviewControllerApi - interface
 * @export
 * @interface ReviewControllerApi
 */
export interface ReviewControllerApiInterface {
    /**
     * 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApiInterface
     */
    deleteReview(reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse>;

    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApiInterface
     */
    getReviewsByProductId(productId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Review>>;

    /**
     * 
     * @param {number} reviewId 
     * @param {CreateReviewRequest} createReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApiInterface
     */
    updateReview(reviewId: number, createReviewRequest: CreateReviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<Review>;

    /**
     * 
     * @param {number} productId 
     * @param {CreateReviewRequest} createReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApiInterface
     */
    writeReview(productId: number, createReviewRequest: CreateReviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<Review>;

}

/**
 * ReviewControllerApi - object-oriented interface
 * @export
 * @class ReviewControllerApi
 * @extends {BaseAPI}
 */
export class ReviewControllerApi extends BaseAPI implements ReviewControllerApiInterface {
    /**
     * 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public deleteReview(reviewId: number, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration).deleteReview(reviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public getReviewsByProductId(productId: number, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration).getReviewsByProductId(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} reviewId 
     * @param {CreateReviewRequest} createReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public updateReview(reviewId: number, createReviewRequest: CreateReviewRequest, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration).updateReview(reviewId, createReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {CreateReviewRequest} createReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public writeReview(productId: number, createReviewRequest: CreateReviewRequest, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration).writeReview(productId, createReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

