/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HomeCategory } from '../models';
// @ts-ignore
import type { ResultHome } from '../models';
// @ts-ignore
import type { ResultHomeCategory } from '../models';
// @ts-ignore
import type { ResultListHomeCategory } from '../models';
/**
 * HomeCategoryControllerApi - axios parameter creator
 * @export
 */
export const HomeCategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<HomeCategory>} homeCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHomeCategories1: async (homeCategory: Array<HomeCategory>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homeCategory' is not null or undefined
            assertParamExists('createHomeCategories1', 'homeCategory', homeCategory)
            const localVarPath = `/admin/home/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homeCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeCategory: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/home/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {HomeCategory} homeCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHomeCategory: async (id: number, homeCategory: HomeCategory, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateHomeCategory', 'id', id)
            // verify required parameter 'homeCategory' is not null or undefined
            assertParamExists('updateHomeCategory', 'homeCategory', homeCategory)
            const localVarPath = `/admin/home/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homeCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeCategoryControllerApi - functional programming interface
 * @export
 */
export const HomeCategoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomeCategoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<HomeCategory>} homeCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHomeCategories1(homeCategory: Array<HomeCategory>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultHome>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHomeCategories1(homeCategory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeCategoryControllerApi.createHomeCategories1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeCategory(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListHomeCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeCategory(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeCategoryControllerApi.getHomeCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {HomeCategory} homeCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHomeCategory(id: number, homeCategory: HomeCategory, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultHomeCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHomeCategory(id, homeCategory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeCategoryControllerApi.updateHomeCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomeCategoryControllerApi - factory interface
 * @export
 */
export const HomeCategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomeCategoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<HomeCategory>} homeCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHomeCategories1(homeCategory: Array<HomeCategory>, options?: RawAxiosRequestConfig): AxiosPromise<ResultHome> {
            return localVarFp.createHomeCategories1(homeCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeCategory(options?: RawAxiosRequestConfig): AxiosPromise<ResultListHomeCategory> {
            return localVarFp.getHomeCategory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {HomeCategory} homeCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHomeCategory(id: number, homeCategory: HomeCategory, options?: RawAxiosRequestConfig): AxiosPromise<ResultHomeCategory> {
            return localVarFp.updateHomeCategory(id, homeCategory, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HomeCategoryControllerApi - interface
 * @export
 * @interface HomeCategoryControllerApi
 */
export interface HomeCategoryControllerApiInterface {
    /**
     * 
     * @param {Array<HomeCategory>} homeCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeCategoryControllerApiInterface
     */
    createHomeCategories1(homeCategory: Array<HomeCategory>, options?: RawAxiosRequestConfig): AxiosPromise<ResultHome>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeCategoryControllerApiInterface
     */
    getHomeCategory(options?: RawAxiosRequestConfig): AxiosPromise<ResultListHomeCategory>;

    /**
     * 
     * @param {number} id 
     * @param {HomeCategory} homeCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeCategoryControllerApiInterface
     */
    updateHomeCategory(id: number, homeCategory: HomeCategory, options?: RawAxiosRequestConfig): AxiosPromise<ResultHomeCategory>;

}

/**
 * HomeCategoryControllerApi - object-oriented interface
 * @export
 * @class HomeCategoryControllerApi
 * @extends {BaseAPI}
 */
export class HomeCategoryControllerApi extends BaseAPI implements HomeCategoryControllerApiInterface {
    /**
     * 
     * @param {Array<HomeCategory>} homeCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeCategoryControllerApi
     */
    public createHomeCategories1(homeCategory: Array<HomeCategory>, options?: RawAxiosRequestConfig) {
        return HomeCategoryControllerApiFp(this.configuration).createHomeCategories1(homeCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeCategoryControllerApi
     */
    public getHomeCategory(options?: RawAxiosRequestConfig) {
        return HomeCategoryControllerApiFp(this.configuration).getHomeCategory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {HomeCategory} homeCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeCategoryControllerApi
     */
    public updateHomeCategory(id: number, homeCategory: HomeCategory, options?: RawAxiosRequestConfig) {
        return HomeCategoryControllerApiFp(this.configuration).updateHomeCategory(id, homeCategory, options).then((request) => request(this.axios, this.basePath));
    }
}

