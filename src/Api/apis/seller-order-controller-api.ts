/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ResultListOrder } from '../models';
// @ts-ignore
import type { ResultOrder } from '../models';
/**
 * SellerOrderControllerApi - axios parameter creator
 * @export
 */
export const SellerOrderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/seller/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {UpdateOrderStatusOrderStatusEnum} orderStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus: async (orderId: number, orderStatus: UpdateOrderStatusOrderStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateOrderStatus', 'orderId', orderId)
            // verify required parameter 'orderStatus' is not null or undefined
            assertParamExists('updateOrderStatus', 'orderStatus', orderStatus)
            const localVarPath = `/seller/order/{orderId}/status/{orderStatus}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)))
                .replace(`{${"orderStatus"}}`, encodeURIComponent(String(orderStatus)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SellerOrderControllerApi - functional programming interface
 * @export
 */
export const SellerOrderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SellerOrderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrders(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerOrderControllerApi.getAllOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {UpdateOrderStatusOrderStatusEnum} orderStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderStatus(orderId: number, orderStatus: UpdateOrderStatusOrderStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderStatus(orderId, orderStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SellerOrderControllerApi.updateOrderStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SellerOrderControllerApi - factory interface
 * @export
 */
export const SellerOrderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SellerOrderControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders(options?: RawAxiosRequestConfig): AxiosPromise<ResultListOrder> {
            return localVarFp.getAllOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {UpdateOrderStatusOrderStatusEnum} orderStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus(orderId: number, orderStatus: UpdateOrderStatusOrderStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<ResultOrder> {
            return localVarFp.updateOrderStatus(orderId, orderStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SellerOrderControllerApi - object-oriented interface
 * @export
 * @class SellerOrderControllerApi
 * @extends {BaseAPI}
 */
export class SellerOrderControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellerOrderControllerApi
     */
    public getAllOrders(options?: RawAxiosRequestConfig) {
        return SellerOrderControllerApiFp(this.configuration).getAllOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {UpdateOrderStatusOrderStatusEnum} orderStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellerOrderControllerApi
     */
    public updateOrderStatus(orderId: number, orderStatus: UpdateOrderStatusOrderStatusEnum, options?: RawAxiosRequestConfig) {
        return SellerOrderControllerApiFp(this.configuration).updateOrderStatus(orderId, orderStatus, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UpdateOrderStatusOrderStatusEnum = {
    Pending: 'PENDING',
    Placed: 'PLACED',
    Confirmed: 'CONFIRMED',
    Shipped: 'SHIPPED',
    Delivered: 'DELIVERED',
    Cancelled: 'CANCELLED'
} as const;
export type UpdateOrderStatusOrderStatusEnum = typeof UpdateOrderStatusOrderStatusEnum[keyof typeof UpdateOrderStatusOrderStatusEnum];
