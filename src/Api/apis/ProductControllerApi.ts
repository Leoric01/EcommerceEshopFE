/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResultListProduct,
  ResultPageProduct,
  ResultProduct,
} from '../models/index';
import {
    ResultListProductFromJSON,
    ResultListProductToJSON,
    ResultPageProductFromJSON,
    ResultPageProductToJSON,
    ResultProductFromJSON,
    ResultProductToJSON,
} from '../models/index';

export interface GetAllProductsRequest {
    category?: string;
    brand?: string;
    colors?: string;
    sizes?: string;
    minPrice?: number;
    maxPrice?: number;
    minDiscount?: number;
    sort?: string;
    stock?: string;
    pageNumber?: number;
}

export interface GetProductRequest {
    productId: number;
}

export interface SearchProductRequest {
    query?: string;
}

/**
 * 
 */
export class ProductControllerApi extends runtime.BaseAPI {

    /**
     */
    async getAllProductsRaw(requestParameters: GetAllProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultPageProduct>> {
        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['brand'] != null) {
            queryParameters['brand'] = requestParameters['brand'];
        }

        if (requestParameters['colors'] != null) {
            queryParameters['colors'] = requestParameters['colors'];
        }

        if (requestParameters['sizes'] != null) {
            queryParameters['sizes'] = requestParameters['sizes'];
        }

        if (requestParameters['minPrice'] != null) {
            queryParameters['minPrice'] = requestParameters['minPrice'];
        }

        if (requestParameters['maxPrice'] != null) {
            queryParameters['maxPrice'] = requestParameters['maxPrice'];
        }

        if (requestParameters['minDiscount'] != null) {
            queryParameters['minDiscount'] = requestParameters['minDiscount'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['stock'] != null) {
            queryParameters['stock'] = requestParameters['stock'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultPageProductFromJSON(jsonValue));
    }

    /**
     */
    async getAllProducts(requestParameters: GetAllProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultPageProduct> {
        const response = await this.getAllProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultProduct>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling getProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{productId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultProductFromJSON(jsonValue));
    }

    /**
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultProduct> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchProductRaw(requestParameters: SearchProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultListProduct>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultListProductFromJSON(jsonValue));
    }

    /**
     */
    async searchProduct(requestParameters: SearchProductRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultListProduct> {
        const response = await this.searchProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
