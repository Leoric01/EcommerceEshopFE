/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { AddItemReq } from "../models";
// @ts-ignore
import type { CartItemQuantityUpdateReq } from "../models";
// @ts-ignore
import type { ResultCart } from "../models";
// @ts-ignore
import type { ResultCartItem } from "../models";
// @ts-ignore
import type { ResultVoid } from "../models";
/**
 * CartControllerApi - axios parameter creator
 * @export
 */
export const CartControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {AddItemReq} addItemReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCart: async (
      addItemReq: AddItemReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'addItemReq' is not null or undefined
      assertParamExists("addItemToCart", "addItemReq", addItemReq);
      const localVarPath = `/cart/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        addItemReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} cartItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCartItem: async (
      cartItemId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'cartItemId' is not null or undefined
      assertParamExists("deleteCartItem", "cartItemId", cartItemId);
      const localVarPath = `/cart/item/{cartItemId}`.replace(
        `{${"cartItemId"}}`,
        encodeURIComponent(String(cartItemId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserCartHandler: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CartItemQuantityUpdateReq} cartItemQuantityUpdateReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCartItemHandler: async (
      cartItemQuantityUpdateReq: CartItemQuantityUpdateReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'cartItemQuantityUpdateReq' is not null or undefined
      assertParamExists(
        "updateCartItemHandler",
        "cartItemQuantityUpdateReq",
        cartItemQuantityUpdateReq
      );
      const localVarPath = `/cart/item`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cartItemQuantityUpdateReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CartControllerApi - functional programming interface
 * @export
 */
export const CartControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CartControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {AddItemReq} addItemReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addItemToCart(
      addItemReq: AddItemReq,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCartItem>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addItemToCart(
        addItemReq,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CartControllerApi.addItemToCart"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} cartItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCartItem(
      cartItemId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCartItem(
        cartItemId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CartControllerApi.deleteCartItem"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUserCartHandler(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCart>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.findUserCartHandler(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CartControllerApi.findUserCartHandler"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CartItemQuantityUpdateReq} cartItemQuantityUpdateReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCartItemHandler(
      cartItemQuantityUpdateReq: CartItemQuantityUpdateReq,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCartItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateCartItemHandler(
          cartItemQuantityUpdateReq,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CartControllerApi.updateCartItemHandler"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CartControllerApi - factory interface
 * @export
 */
export const CartControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CartControllerApiFp(configuration);
  return {
    /**
     *
     * @param {AddItemReq} addItemReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCart(
      addItemReq: AddItemReq,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ResultCartItem> {
      return localVarFp
        .addItemToCart(addItemReq, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} cartItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCartItem(
      cartItemId: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ResultVoid> {
      return localVarFp
        .deleteCartItem(cartItemId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserCartHandler(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ResultCart> {
      return localVarFp
        .findUserCartHandler(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CartItemQuantityUpdateReq} cartItemQuantityUpdateReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCartItemHandler(
      cartItemQuantityUpdateReq: CartItemQuantityUpdateReq,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ResultCartItem> {
      return localVarFp
        .updateCartItemHandler(cartItemQuantityUpdateReq, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CartControllerApi - object-oriented interface
 * @export
 * @class CartControllerApi
 * @extends {BaseAPI}
 */
export class CartControllerApi extends BaseAPI {
  /**
   *
   * @param {AddItemReq} addItemReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CartControllerApi
   */
  public addItemToCart(
    addItemReq: AddItemReq,
    options?: RawAxiosRequestConfig
  ) {
    return CartControllerApiFp(this.configuration)
      .addItemToCart(addItemReq, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} cartItemId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CartControllerApi
   */
  public deleteCartItem(cartItemId: number, options?: RawAxiosRequestConfig) {
    return CartControllerApiFp(this.configuration)
      .deleteCartItem(cartItemId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CartControllerApi
   */
  public findUserCartHandler(options?: RawAxiosRequestConfig) {
    return CartControllerApiFp(this.configuration)
      .findUserCartHandler(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CartItemQuantityUpdateReq} cartItemQuantityUpdateReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CartControllerApi
   */
  public updateCartItemHandler(
    cartItemQuantityUpdateReq: CartItemQuantityUpdateReq,
    options?: RawAxiosRequestConfig
  ) {
    return CartControllerApiFp(this.configuration)
      .updateCartItemHandler(cartItemQuantityUpdateReq, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

