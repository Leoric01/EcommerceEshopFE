/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Deal,
  ResultDeal,
  ResultVoid,
} from '../models/index';
import {
    DealFromJSON,
    DealToJSON,
    ResultDealFromJSON,
    ResultDealToJSON,
    ResultVoidFromJSON,
    ResultVoidToJSON,
} from '../models/index';

export interface CreateDealRequest {
    deal: Deal;
}

export interface CreateDeal1Request {
    id: number;
    deal: Deal;
}

export interface DeleteDealRequest {
    id: number;
}

/**
 * 
 */
export class DealControllerApi extends runtime.BaseAPI {

    /**
     */
    async createDealRaw(requestParameters: CreateDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultDeal>> {
        if (requestParameters['deal'] == null) {
            throw new runtime.RequiredError(
                'deal',
                'Required parameter "deal" was null or undefined when calling createDeal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/deals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DealToJSON(requestParameters['deal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultDealFromJSON(jsonValue));
    }

    /**
     */
    async createDeal(requestParameters: CreateDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultDeal> {
        const response = await this.createDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createDeal1Raw(requestParameters: CreateDeal1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultDeal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createDeal1().'
            );
        }

        if (requestParameters['deal'] == null) {
            throw new runtime.RequiredError(
                'deal',
                'Required parameter "deal" was null or undefined when calling createDeal1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/deals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DealToJSON(requestParameters['deal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultDealFromJSON(jsonValue));
    }

    /**
     */
    async createDeal1(requestParameters: CreateDeal1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultDeal> {
        const response = await this.createDeal1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteDealRaw(requestParameters: DeleteDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultVoid>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDeal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/deals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultVoidFromJSON(jsonValue));
    }

    /**
     */
    async deleteDeal(requestParameters: DeleteDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultVoid> {
        const response = await this.deleteDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
